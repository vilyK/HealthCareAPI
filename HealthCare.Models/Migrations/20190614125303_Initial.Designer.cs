// <auto-generated />
using System;
using HealthCare.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthCare.DataLayer.Migrations
{
    [DbContext(typeof(HealthCareDbContext))]
    [Migration("20190614125303_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("DoctorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PatientId");

                    b.Property<int>("Reason");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Appraisal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppraisalDate");

                    b.Property<int>("AppraisalType");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RecipientId");

                    b.Property<int>("SenderId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Appraisals");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Event.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EventDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalCenter.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalCenter.MedicalCenterDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("DepartmentId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicalCenterId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MedicalCenterId");

                    b.ToTable("MedicalCenterDepartments");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalCenter.MedicalCenterDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("DoctorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicalCenterId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalCenterId");

                    b.ToTable("MedicalCenterDoctors");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalCenter.MedicalCenterInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Details");

                    b.Property<bool>("HasEmergency");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNzok");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalCenterInfos");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllergyTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("AllergyTypeId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.AllergyTreatment", b =>
                {
                    b.Property<int>("AllergyId");

                    b.Property<int>("TreatmentId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("AllergyId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("AllergyTreatments");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.AllergyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("AllergyTypes");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.Illness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("IllnessPeriod");

                    b.Property<int>("IllnessTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("IllnessTypeId");

                    b.ToTable("Illnesses");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.IllnessCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("IllnessCategories");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.IllnessTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("IllnessId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("TreatmentId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("IllnessTreatments");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.IllnessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("IllnessCategoryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("OtherName");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("IllnessCategoryId");

                    b.ToTable("IllnessTypes");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<int>("BloodGroup");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PatientInfoId");

                    b.Property<int>("PhysicalActivityLevel");

                    b.Property<int>("StressLevel");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("PatientInfoId");

                    b.ToTable("MedicalProfiles");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalProfileAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllergyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicalProfileId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("MedicalProfileId");

                    b.ToTable("MedicalProfileAllergies");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalProfileIllness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("IllnessId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicalProfileId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.HasIndex("MedicalProfileId");

                    b.ToTable("MedicalProfileIllnesses");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalProfileMedicalTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicalProfileId");

                    b.Property<int>("MedicalTestId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MedicalProfileId");

                    b.HasIndex("MedicalTestId");

                    b.ToTable("MedicalProfileMedicalTests");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicalCenterId");

                    b.Property<DateTime>("MedicalTestDate");

                    b.Property<int>("MedicalTestTypeId");

                    b.Property<string>("Results");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MedicalCenterId");

                    b.HasIndex("MedicalTestTypeId");

                    b.ToTable("MedicalTests");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalTestAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicalTestId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTestId");

                    b.ToTable("MedicalTestAttachments");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalTestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("MedicalTestTypes");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.Medicament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int?>("PharmacyCompanyId");

                    b.Property<int>("PharmacyCompanyInfoId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PharmacyCompanyId");

                    b.ToTable("Medicaments");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicamentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("MedicamentCategories");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.OutpatientCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("DoctorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PatientId");

                    b.Property<string>("Results");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("OutpatientCards");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.OutpatientCardAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllergyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OutpatientCardId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("OutpatientCardId");

                    b.ToTable("OutpatientCardAllergies");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.OutpatientCardIllness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("IllnessId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OutpatientCardId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.HasIndex("OutpatientCardId");

                    b.ToTable("OutpatientCardIllnesses");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.OutpatientCardMedicalTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicalTestId");

                    b.Property<int>("OutpatientCardId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTestId");

                    b.HasIndex("OutpatientCardId");

                    b.ToTable("OutpatientCardMedicalTests");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.TreatmentMedicament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicamentId");

                    b.Property<int>("TreatmentId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MedicamentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("TreatmentMedicaments");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedManInfoId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<DateTime>("Year");

                    b.HasKey("Id");

                    b.HasIndex("MedManInfoId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.MedicalManInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNzok");

                    b.Property<string>("LastName");

                    b.Property<int>("MedicalCenterId");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MedicalCenterId");

                    b.ToTable("MedicalManInfos");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.MedicalManInfoPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedManInfoId");

                    b.Property<int>("PriceTypeId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("MedManInfoId");

                    b.HasIndex("PriceTypeId");

                    b.ToTable("MedicalManInfoPrices");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.MedicalMenSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedMenInfoId");

                    b.Property<int>("SpecialtyId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MedMenInfoId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("MedicalMenSpecialties");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.PriceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("PricesType");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("From");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MedicalMedId");

                    b.Property<DateTime>("To");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("MedicalMedId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("NotificationDate");

                    b.Property<int>("ReasonType");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Notification.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Notification.NotificationTypeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationTypeId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationTypeUsers");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Notification.NotificationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Patient.PatientInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PatientInfos");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Pharmacy.PharmacyDistributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("DistributorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PharmacyId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacyDistributors");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Pharmacy.PharmacyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("PharmacyId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacyInfos");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.PharmacyCompany.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.PharmacyCompany.PharmacyCompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Details");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("PharmacyCompanyId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyCompanyId");

                    b.ToTable("PharmacyCompanyInfos");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.PharmacyCompany.PharmacyCompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PharmacyCompanyInfoId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("PharmacyCompanyInfoId");

                    b.ToTable("PharmacyCompanyTypes");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Tooltip.Tooltip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("TooltipTypeId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("TooltipTypeId");

                    b.ToTable("Tooltips");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Tooltip.TooltipItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Order");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.Property<int>("TooltipId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("TooltipId");

                    b.ToTable("TooltipItems");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Tooltip.TooltipPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ToolTipItemId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ToolTipItemId");

                    b.ToTable("TooltipPhotos");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Tooltip.TooltipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("TooltipTypes");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlockEntrance");

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Entrance");

                    b.Property<int>("FlatNumber");

                    b.Property<int>("Floor");

                    b.Property<bool>("IsCurrent");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("StreetName");

                    b.Property<string>("StreetNumber");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserContactId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserContactId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserContactId");

                    b.HasKey("Id");

                    b.HasIndex("UserContactId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Number");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserContactId");

                    b.HasKey("Id");

                    b.HasIndex("UserContactId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMain");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Password");

                    b.Property<int>("RoleType");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.UserContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Appointment", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Doctor")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Patient")
                        .WithMany("PatientAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Appraisal", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Recipient")
                        .WithMany("ReceivedAppraisals")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Sender")
                        .WithMany("SentAppraisals")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalCenter.MedicalCenterDepartment", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalCenter.Department", "Department")
                        .WithMany("MedicalCenterDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalCenter.MedicalCenterInfo", "MedicalCenter")
                        .WithMany("MedicalCenterDepartments")
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalCenter.MedicalCenterDoctor", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Doctor")
                        .WithMany("DoctorWorkPlaces")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "MedicalCenter")
                        .WithMany("MedicalCenterEmployees")
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalCenter.MedicalCenterInfo", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.Allergy", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.AllergyType", "AllergyType")
                        .WithMany()
                        .HasForeignKey("AllergyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.AllergyTreatment", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Allergy", "Allergy")
                        .WithMany("AllergyTreatments")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Treatment", "Treatment")
                        .WithMany("AllergyTreatments")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.Illness", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.IllnessType", "IllnessType")
                        .WithMany()
                        .HasForeignKey("IllnessTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.IllnessTreatment", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Illness", "Illness")
                        .WithMany("IllnessTreatments")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Treatment", "Treatment")
                        .WithMany("IllnessTreatments")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.IllnessType", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.IllnessCategory", "IllnessCategory")
                        .WithMany()
                        .HasForeignKey("IllnessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalProfile", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.Patient.PatientInfo", "PatientInfo")
                        .WithMany()
                        .HasForeignKey("PatientInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalProfileAllergy", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Allergy", "Allergy")
                        .WithMany("MedicalProfileAllergies")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.MedicalProfile", "MedicalProfile")
                        .WithMany("MedicalProfileAllergies")
                        .HasForeignKey("MedicalProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalProfileIllness", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Illness", "Illness")
                        .WithMany("MedicalProfileIllnesses")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.MedicalProfile", "MedicalProfile")
                        .WithMany("MedicalProfileIllnesses")
                        .HasForeignKey("MedicalProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalProfileMedicalTest", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.MedicalProfile", "MedicalProfile")
                        .WithMany("MedicalProfileMedicalTests")
                        .HasForeignKey("MedicalProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.MedicalTest", "MedicalTest")
                        .WithMany("MedicalProfileMedicalTests")
                        .HasForeignKey("MedicalTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalTest", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalCenter.MedicalCenterInfo", "MedicalCenter")
                        .WithMany()
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.MedicalTestType", "MedicalTestType")
                        .WithMany()
                        .HasForeignKey("MedicalTestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.MedicalTestAttachment", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.MedicalTest", "MedicalTest")
                        .WithMany("MedicalTestAttachments")
                        .HasForeignKey("MedicalTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.Medicament", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.MedicamentCategory", "MedicamentCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.PharmacyCompany.PharmacyCompanyInfo", "PharmacyCompanyInfo")
                        .WithMany()
                        .HasForeignKey("PharmacyCompanyId");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.OutpatientCard", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.OutpatientCardAllergy", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Allergy", "Allergy")
                        .WithMany("OutpatientCardAllergies")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.OutpatientCard", "OutpatientCard")
                        .WithMany("OutpatientCardAllergies")
                        .HasForeignKey("OutpatientCardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.OutpatientCardIllness", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Illness", "Illness")
                        .WithMany("OutpatientCardIllnesses")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.OutpatientCard", "OutpatientCard")
                        .WithMany("OutpatientCardIllnesses")
                        .HasForeignKey("OutpatientCardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.OutpatientCardMedicalTest", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.MedicalTest", "MedicalTest")
                        .WithMany("OutpatientCardMedicalTests")
                        .HasForeignKey("MedicalTestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.OutpatientCard", "OutpatientCard")
                        .WithMany("OutpatientCardMedicalTests")
                        .HasForeignKey("OutpatientCardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalData.TreatmentMedicament", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Medicament", "Medicament")
                        .WithMany("TreatmentMedicaments")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalData.Treatment", "Treatment")
                        .WithMany("TreatmentMedicaments")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.Award", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalMan.MedicalManInfo", "MedManInfo")
                        .WithMany()
                        .HasForeignKey("MedManInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.MedicalManInfo", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "MedicalCenter")
                        .WithMany()
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.MedicalManInfoPrice", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalMan.MedicalManInfo", "MedManInfo")
                        .WithMany("Prices")
                        .HasForeignKey("MedManInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalMan.PriceType", "PriceType")
                        .WithMany("MedicalMen")
                        .HasForeignKey("PriceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.MedicalMenSpecialty", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalMan.MedicalManInfo", "MedManInfo")
                        .WithMany("Specialties")
                        .HasForeignKey("MedMenInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.MedicalMan.Specialty", "Specialty")
                        .WithMany("MedicalMan")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.MedicalMan.Schedule", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.MedicalMan.MedicalManInfo", "MedicalManInfo")
                        .WithMany()
                        .HasForeignKey("MedicalMedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Notification.NotificationTypeUser", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.Notification.NotificationType", "NotificationType")
                        .WithMany("NotificationTypeUsers")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "User")
                        .WithMany("NotificationTypeUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Notification.NotificationUser", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.Notification.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Patient.PatientInfo", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Patient")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Pharmacy.PharmacyDistributor", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Distributor")
                        .WithMany("PharmaciesPerDistributor")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Pharmacy")
                        .WithMany("DistributorsPerPharmacy")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Pharmacy.PharmacyInfo", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.PharmacyCompany.PharmacyCompanyInfo", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "PharmacyCompany")
                        .WithMany()
                        .HasForeignKey("PharmacyCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.PharmacyCompany.PharmacyCompanyType", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.PharmacyCompany.CompanyType", "CompanyType")
                        .WithMany("PharmacyCompanyTypes")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.PharmacyCompany.PharmacyCompanyInfo", "PharmacyCompanyInfo")
                        .WithMany("PharmacyCompanyTypes")
                        .HasForeignKey("PharmacyCompanyInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Tooltip.Tooltip", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.Tooltip.TooltipType", "TooltipType")
                        .WithMany()
                        .HasForeignKey("TooltipTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Tooltip.TooltipItem", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.Tooltip.Tooltip", "Tooltip")
                        .WithMany("TooltipItems")
                        .HasForeignKey("TooltipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.Tooltip.TooltipPhoto", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.Tooltip.TooltipItem", "TooltipItem")
                        .WithMany()
                        .HasForeignKey("ToolTipItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Address", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.User.UserContact", "UserContact")
                        .WithMany("Addresses")
                        .HasForeignKey("UserContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.City", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthCare.DataLayer.Entities.User.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Email", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.UserContact", "UserContact")
                        .WithMany("Emails")
                        .HasForeignKey("UserContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Phone", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.UserContact", "UserContact")
                        .WithMany("Phones")
                        .HasForeignKey("UserContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.Photo", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.User", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("HealthCare.DataLayer.Entities.User.UserContact", b =>
                {
                    b.HasOne("HealthCare.DataLayer.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
